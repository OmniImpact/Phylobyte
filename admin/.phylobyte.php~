<?php

class phylobyte{

	public $messageStamp;
	public $messageArea;
	public $navigationArea;
	public $pageArea;
	public $docArea;
	public $pageTitle = 'Phylobyte CMS';
	
	static $sessionUserInfo;
	
	static $phylobyteDB;

	function __construct(){
		$this->messageStamp = microtime(true);
		//$GLOBALS['MESSAGES']->push($this->messageStamp.microtime(true), '#d.'.'Initialized Phylobyte Class'.'##.');
		try{
			$this->phylobyteDB = new SQLite3("../data/phylobyte_tinyregistry.db");
		}catch(PDOException $e){
			$this->messageAddDebug('Failed to open database: '.$e);
		}
		try{
			if(@$this->phylobyteDB->exec("
				CREATE TABLE p_groups(id INTEGER PRIMARY KEY, name TEXT, description TEXT);
				CREATE TABLE p_users(id INTEGER PRIMARY KEY, username TEXT, email TEXT, status TEXT, primarygroup TEXT, passwordhash TEXT);
				INSERT INTO p_groups (name, description) VALUES ('admin', 'Phylobyte default administrator group');
				INSERT INTO p_users (username, status) VALUES ('admin', 'override');
				")) $this->messageAddDebug('Initialized Phylobyte User Tables');
		}catch(PDOException $e){}
		if($this->login()){
			$this->navBuild();
			$this->pageBuild();
		}
	}
	
	function pDB($action=null, $argument=null){
		switch($action){
		
			case 'clean':
				$this->phylobyteDB->close();
				$this->phylobyteDB = new SQLite3("../data/phylobyte_tinyregistry.db");
			break;
			
			default:
				$this->phylobyteDB = new SQLite3("../data/phylobyte_tinyregistry.db");
			break;
		}
	}
	
	function login(){
		//do logout
		if($_REQUEST['phylobyte'] == 'logout'){
			unset($_SESSION['loginid']);
			$this->messageAddNotification('You are now logged out');
		}
		//do login
		if(isset($_SESSION['loginid'])){
			$userquery = $this->phylobyteDB->query("SELECT * FROM p_users WHERE id='{$_SESSION['loginid']}';");
			$this->sessionUserInfo = $userquery->fetchArray();
			$this->pDB('clean');
		}
		if(!isset($_SESSION['loginid']) || $this->sessionUserInfo['status'] == 'override'){
			include('loginform.php');
			$this->messageAddAlert('To use Phylobyte, you must log in.');
			return false;
		}else{
			//credentials OK for now
			//query database and get user info. store to $sessionUserInfo
			return true;
		}
	}
	
	function navBuild(){
		$this->navigationArea.='
		<ul>
		<li><a href="?">Home</a></li>';
		
		$this->navigationArea.='
		<li><a href="?phylobyte=logout">My Account</a>
			<ul>
				<li><a>Login Credentials</a></li>
				<li><a>Personal Information</a></li>
			</ul>
		</li>
		<li><a href="?phylobyte=logout">Log Out</a></li>
		</ul>
		';
		return true;
	}
	
	function pageBuild(){
		include('home.php');
		return true;
	}
	
	function build_finish(){
		$this->messageArea = $GLOBALS['MESSAGES']->pullquery('%v%', "SELECT * FROM __REGISTRY____pmessages WHERE key LIKE '{$this->messageStamp}%';");
		$this->messageArea = str_replace('#e.', '<div class="error">', $this->messageArea);
		$this->messageArea = str_replace('#a.', '<div class="alert">', $this->messageArea);
		$this->messageArea = str_replace('#n.', '<div class="notification">', $this->messageArea);
		$this->messageArea = str_replace('#d.', '<div class="debug">', $this->messageArea);
		
		$this->messageArea = str_replace('##.', '</div>', $this->messageArea);
	}
	
	function messageAddAlert($alert){
		$GLOBALS['MESSAGES']->push($this->messageStamp.microtime(true), '#a.'.$alert.'##.');
	}
	function messageAddError($error){
		$GLOBALS['MESSAGES']->push($this->messageStamp.microtime(true), '#e.'.$error.'##.');
	}
	function messageAddNotification($notice){
		$GLOBALS['MESSAGES']->push($this->messageStamp.microtime(true), '#n.'.$notice.'##.');
	}
	function messageAddDebug($debug){
		$GLOBALS['MESSAGES']->push($this->messageStamp.microtime(true), '#d.'.$debug.'##.');
	}
}

?>